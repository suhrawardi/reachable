.type List = [
    head: symbol,
    tail: List
]

.type X = symbol
.type Y = symbol

.decl Popularity(x:X, i:number) choice-domain x
.decl Reach(x:X, i:number) choice-domain x
.decl Relation(x:X, y:Y)
.decl Edge(x:X, y:Y)
.decl Path(x:X, y:Y, p:List, i:number) choice-domain (x, y)
.decl BufferOut(x:X, y:Y, i:number, s:symbol, p:List)
.decl Out(x:X, y:Y, i:number, s:symbol)

.input Relation(IO=file, filename="edges.csv", delimiter=",")
.output Out(IO=file, filename="out.csv", delimiter=",")
.output Popularity(IO=file, filename="popularity.csv", delimiter=",")
.output Reach(IO=file, filename="reach.csv", delimiter=",")

Popularity(y, count : { Edge(_, y) }) :- Edge(_, y).

Edge(x, y) :- Relation(x, y), x != y.

Path(x, y, [y, [x, nil]], 1) :- Edge(x, y).
Path(x, z, [z, p], (i + 1)) :- Path(x, y, p, i), Edge(y, z).

Reach(x, count : { Path(x, _, _, _) }) :- Path(x, _, _, _).

BufferOut(x, y, i, s, p) :- Path(x, y, p2, i), [s, p] = p2.
BufferOut(x, y, i, cat(b, cat(" -> ", a)), p) :- BufferOut(x, y, i, a, p2), p2 != nil, [b, p] = p2.

Out(x, y, i, s) :- BufferOut(x, y, i, s, nil).

