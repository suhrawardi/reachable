.type List = [
    head: symbol,
    tail: List
]
.type X = symbol
.type Y = symbol

.decl Popularity(x:X, i:number)
.decl Edge(x:X, xType:symbol, y:Y, yType:symbol)
.decl Reachable(x:X, xType:symbol, y:Y, yType:symbol, i:number, p:List)
.decl BufferOut(x:X, xT:symbol, y:Y, yT:symbol, i:number, s:symbol, p:List)
.decl Out(x:X, xT:symbol, y:Y, yT:symbol, i:number, s:symbol)

.input Edge(IO=file, filename="edges.csv", delimiter=",")
.output Out(IO=file, filename="out.csv", delimiter=",")
.output Popularity(IO=file, filename="popularity.csv", delimiter=",")
// .output Reachable(IO=file, filename="reachable.csv", delimiter=",")

Popularity(y, count : { Edge(_, _, y, _) }) :- Edge(_, _, y, _).

Reachable(x, "TA", y, yt, 1, [x, [y, nil]]) :- Edge(x, "TA", y, yt).
Reachable(x, xt, z, zt, (i + 1), [x, p]) :- Edge(x, xt, y, yt), Reachable(y, yt, z, zt, i, p), x != y, i < 5.

BufferOut(x, xt, y, yt, i, s, p2) :- Reachable(x, xt, y, yt, i, p), [s, p2] = p.
BufferOut(x, xt, y, yt, i, cat(a, cat(" -> ", b)), p2) :- BufferOut(x, xt, y, yt, i, a, p), p != nil, [b, p2] = p.

Out(x, xt, y, "", i, s) :- BufferOut(x, xt, y, "0", i, s, nil).
Out(x, xt, y, yt, i, s) :- BufferOut(x, xt, y, yt, i, s, nil), yt != "0".

